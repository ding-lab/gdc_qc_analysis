import argparse
from collections import namedtuple
import gzip


def maf_reader(pth):
    with open(pth) as f:
        header = next(f)[:-1].split('\t')
        # Generate the record based on the header
        Record = namedtuple('Record', header)
        for line in f:
            yield Record._make(line[:-1].split('\t'))


def read_g_coord_conversion(pth):
    FAILED_CONVERSION = "-1", -1, -1
    with gzip.open(pth, 'rt') as f:
        for line in f:
            if 'Fail' in line:
                yield FAILED_CONVERSION
                continue
            elif 'split' in line:
                # Read until we skip all the split'd records
                while 'split' in line:
                    line = next(f)
                yield FAILED_CONVERSION
                # The while loop will break at the new record so we don't continue here
            *_, new_chrom, new_start, new_end = line[:-1].split('\t')
            # Convert back to 1-based coord
            yield new_chrom, int(new_start) + 1, int(new_end)


def main(args):
    # Open the output file in the buffered mode
    with open(args.out_pth, 'w', buffering=64 * 1024) as f:
        # Write the original MAF header
        f.write(open(args.maf_pth).readline())

        for record, converted_g_coord in zip(maf_reader(args.maf_pth), read_g_coord_conversion(args.new_coord_gz_pth)):
            new_chrom, new_start, new_end = converted_g_coord
            if new_chrom == '-1':
                # The conversion failed. And we SKIP THIS RECORD
                continue

            # Replace the MAF record with the new converted coord
            converted_record = record._replace(
                NCBI_Build='GRCh38',
                Chromosome=new_chrom,
                Start_Position=new_start,
                End_Position=new_end,
            )
            print(*converted_record, sep='\t', file=f)


if __name__ == '__main__':
    parser = argparse.ArgumentParser(
        description="Swap the MAF's genomic coordinates using the given gzip'd BED format."
    )
    parser.add_argument('maf_pth', help="Path to the MAF file")
    parser.add_argument(
        'new_coord_gz_pth',
        help="Path to the gzip'd genomic coordinate conversion result generated by crossmap."
    )
    parser.add_argument('out_pth', help="Path to the output MAF file")
    args = parser.parse_args()
    main(args)
