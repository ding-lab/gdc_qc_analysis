import argparse
import gzip
from pathlib import Path
from maf_utils import MC3MAF


def read_g_coord_conversion(pth):
    FAILED_CONVERSION = "-1", -1, -1
    with gzip.open(pth, 'rt') as f:
        for line in f:
            if 'split' in line:
                # Read until we skip all the split'd records
                while 'split' in line:
                    line = next(f)
                yield FAILED_CONVERSION
                # The while loop will break at the new record so we don't continue here
            if 'Fail' in line:
                yield FAILED_CONVERSION
                continue
            *_, new_chrom, new_start, new_end = line[:-1].split('\t')
            # Convert back to 1-based coord
            yield new_chrom, int(new_start) + 1, int(new_end)


def main(args):
    maf_reader = MC3MAF(Path(args.maf_pth))
    g_coord_reader = read_g_coord_conversion(args.new_coord_gz_pth)
    # Open the output file in the buffered mode
    with gzip.open(args.out_pth, 'wt') as f:
        # Write the original MAF header
        f.write(gzip.open(args.maf_pth, 'rt').readline())

        for record, converted_g_coord in zip(maf_reader, g_coord_reader):
            new_chrom, new_start, new_end = converted_g_coord
            if new_chrom == '-1':
                # The conversion failed. And we SKIP THIS RECORD
                continue

            # Replace the MAF record with the new converted coord
            converted_record = record._replace(
                ncbi_build='GRCh38',
                chromosome=new_chrom,
                start_position=new_start,
                end_position=new_end,
            )
            print(*converted_record, sep='\t', file=f)


if __name__ == '__main__':
    parser = argparse.ArgumentParser(
        description="Swap the MAF's genomic coordinates using the given gzip'd BED format."
    )
    parser.add_argument('maf_pth', help="Path to the MAF file")
    parser.add_argument(
        'new_coord_gz_pth',
        help="Path to the gzip'd genomic coordinate conversion result generated by crossmap."
    )
    parser.add_argument('out_pth', help="Path to the output MAF file")
    args = parser.parse_args()
    main(args)
