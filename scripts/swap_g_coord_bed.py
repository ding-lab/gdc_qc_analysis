import argparse
import logging
import gzip
from pathlib import Path
from maf_utils import MC3MAF

logger = logging.getLogger(__name__)


def read_g_coord_conversion(pth):
    FAILED_CONVERSION = "-1", -1, -1, "-1", -1, -1
    with gzip.open(pth, 'rt') as f:
        line = f.readline()
        while line:
            if '(split' in line:
                # Read until we skip all the split'd records of a same origin
                orig_coord = tuple(line.split('\t', maxsplit=3)[:3])
                current_coord = orig_coord
                while '(split' in line and orig_coord == current_coord:
                    line = f.readline()
                    current_coord = tuple(line.split('\t', maxsplit=3)[:3])

                yield FAILED_CONVERSION
                continue
                # The while loop will break at the new record so we don't continue here
            elif 'Fail' in line:
                yield FAILED_CONVERSION
                line = f.readline()
                continue
            old_chrom, old_start, old_end, _, new_chrom, new_start, new_end = line[:-1].split('\t')
            # Convert back to 1-based coord
            yield old_chrom, int(old_start) + 1, int(old_end), new_chrom, int(new_start) + 1, int(new_end)
            line = f.readline()


def main(args):
    maf_reader = MC3MAF(Path(args.maf_pth))
    g_coord_reader = read_g_coord_conversion(args.new_coord_gz_pth)
    # Write the original MAF header
    print('\t'.join(maf_reader.raw_columns[:-1]))

    for i, (record, converted_g_coord) in enumerate(zip(maf_reader, g_coord_reader), 1):
        if i % 500000 == 0:
            logger.info(f'Read {i:,d} records')
        old_chrom, old_start, old_end, new_chrom, new_start, new_end = converted_g_coord
        if new_chrom == '-1':
            # The conversion failed. And we SKIP THIS RECORD
            continue
        # Make sure the current record aligns to the current coordinate
        if old_start != int(record.start_position) or old_end != int(record.end_position):
            logger.error(
                f'Coordinate mismatch! Expected {converted_g_coord} '
                f'but current record should be {record.chromosome}:'
                f'{record.start_position}-{record.end_position}'
            )
            raise ValueError('Record misaligned')

        # Replace the MAF record with the new converted coord
        converted_record = record._replace(
            ncbi_build='GRCh38',
            chromosome=new_chrom,
            start_position=new_start,
            end_position=new_end,
        )
        print(*converted_record, sep='\t')


if __name__ == '__main__':
    # Setup console logging
    console = logging.StreamHandler()
    all_loggers = logging.getLogger()
    all_loggers.setLevel(logging.INFO)
    all_loggers.addHandler(console)
    log_fmt = '[%(asctime)s][%(levelname)-7s] %(message)s'
    log_formatter = logging.Formatter(log_fmt, '%Y-%m-%d %H:%M:%S')
    console.setFormatter(log_formatter)

    parser = argparse.ArgumentParser(
        description="Swap the MAF's genomic coordinates using the given gzip'd BED format."
    )
    parser.add_argument('maf_pth', help="Path to the MAF file")
    parser.add_argument(
        'new_coord_gz_pth',
        help="Path to the gzip'd genomic coordinate conversion result generated by crossmap."
    )
    args = parser.parse_args()
    main(args)
